AssignmentStatement.cpp:        auto temp_reg = Register::create();
BinaryExpression.cpp:	this->result = Register::create();
BinaryExpression.cpp:            //this->result = Register::create();
BinaryExpression.cpp:            //this->result = Register::create();
BinaryExpression.cpp:            //this->result = Register::create();
BinaryExpression.cpp:            //this->result = Register::create();
BinaryExpression.cpp:            //this->result = Register::create();
BinaryExpression.cpp:            //this->result = Register::create();
BinaryExpression.cpp:            //this->result = Register::create();
BinaryExpression.cpp:            //this->result = Register::create();
BinaryExpression.cpp:    this->result = Register::create();
IdentifierExpression.cpp:        this->result = Register::create(id);
IdentifierExpression.cpp:    this->deref_result = Register::create();
LvalueId.cpp:        result = Register::create(id); 
NewExpression.cpp:    this->result = Register::create();
PrintStatement.cpp:    Register::create();
Register.cpp:std::shared_ptr<Register> Register::create(const std::string &id,const bool&is_global,const bool &is_pseudo) {
