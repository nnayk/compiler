AssignmentStatement.cpp:56:        auto temp_reg = Register::create();
AssignmentStatement.cpp:103:        reg = Register::create(val,false,true);
AssignmentStatement.cpp:111:            reg = Register::create();
Bblock.cpp:173:        auto reg = Register::create(name);
BinaryExpression.cpp:71:	this->result = Register::create();
BinaryExpression.cpp:97:            //this->result = Register::create();
BinaryExpression.cpp:104:            //this->result = Register::create();
BinaryExpression.cpp:111:            //this->result = Register::create();
BinaryExpression.cpp:118:            //this->result = Register::create();
BinaryExpression.cpp:125:            //this->result = Register::create();
BinaryExpression.cpp:132:            //this->result = Register::create();
BinaryExpression.cpp:139:            //this->result = Register::create();
BinaryExpression.cpp:146:            //this->result = Register::create();
BinaryExpression.cpp:184:    this->result = Register::create();
IdentifierExpression.cpp:14:        this->result = Register::create(id);
IdentifierExpression.cpp:49:    this->deref_result = Register::create();
LvalueId.cpp:11:        result = Register::create(id); // TODO: change this!!! should only be for non-ssa (basically move this to get_llvm_init)
LvalueId.cpp:85:        this->result = Register::create(source_immediate,false,true);
LvalueId.cpp:87:        this->result = Register::create();
NewExpression.cpp:32:    this->result = Register::create();
PrintStatement.cpp:25:    Register::create();
Register.cpp:17:std::shared_ptr<Register> Register::create(const std::string &id,const bool&is_global,const bool &is_pseudo) {
